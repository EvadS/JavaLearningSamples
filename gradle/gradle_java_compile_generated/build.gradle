apply plugin: 'java'
apply plugin: 'application'




jar {
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest {
        attributes 'Main-Class': 'net.petrikainulainen.HelloWorld'
    }
}


sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }

        resources {
            srcDir 'src/resources'
        }
    }

    generated {
        java {
            srcDir 'src/second/java'
            java.outputDir = file('out/generated')
        }
    }
}


task generatedJar(type: Jar) {
    from sourceSets.generated.output
}

//create a single Jar with all dependencies
task fatJarfatJar(type: Jar) {
    from sourceSets.generated.output
    baseName = 'generated_jar'
    manifest {
        attributes 'Main-Class': 'com.se.generated.MainClass'
    }
}


repositories {
    mavenCentral()
}


dependencies {
    compile 'log4j:log4j:1.2.17'
    testCompile 'junit:junit:4.11'
}

mainClassName = 'net.petrikainulainen.HelloWorld'

task print {
    println("--------")

    print(sourceSets.main.java.srcDirs)
    println("====")
    println("$buildDir")
    println("projectDir")
    println("$projectDir")
    println("path")
    println("$path")

    println("------")
    println project.buildDir
    println getProject().getBuildDir()
}

task copyReports(type: Copy) {
    from "${buildDir}/classes"
    include "*.class"
    // all sub directory
    include "**/*.class"
    into "${buildDir}/toArchive"
}

//---------------

task ensureDirectory {
    doLast {
        mkdir "images"
    }
}

task ensureDirectory2 {
    doLast {
        mkdir "images2"
    }
}

task myClean(type: Delete) {
    delete "images"
}


